[tool.poetry]
name = "optimize_eig"
version = "0.1.0"
description = "optimize eig"
authors = ["Konstantin Ladutenko <kostyfisik@gmail.com>"]
maintainers = ["Konstantin Ladutenko <kostyfisik@gmail.com>"]
license = "GPL_3.0"
repository = "https://github.com/kostyfisik/optimize-eig"
documentation = "https://github.com/kostyfisik/optimize-eig/tree/main/docs/api/"
readme = "README.md"
packages = [{ include = "optimize_eig" }]

[tool.poetry.dependencies]
python = "^3.11"

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.18.1"
xdoctest = "^1.0.0"
poethepoet = "^0.16.4"
ruff = ">=0.1.7"
pytest = ">=7.1.1"
pytest-html = ">=4.1.0"
pytest-cov = ">=5.0.0"
pytest-xdist = ">=3.6.1"
mkdocs = ">=1.6.0"
mkdocs-material = ">=9.5.0"
mkdocs-gen-files = ">=0.5.0"
mkdocs-awesome-pages-plugin = ">=2.9.2"
mkdocstrings = { extras = ["python"], version = "^0.25.1" }

[tool.poetry.scripts]
-c = "poethepoet:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff.lint]
ignore = [
  "E501",
  "RET",
  "ANN101", # missing-type-self
  "D100",   # missing-module-docstring
  "D101",   # undocumented-public-class 
  "D102",   # missing-function-docstring
  "D103",   #Missing docstring in public function
  "D105",   #Missing docstring in magic method
  "D107",   #Missing docstring in `__init__`
  "N802",   #    Function name should be lowercase 
  "ERA001", # Found commented-out code
]
select = [
  "A",
  "ANN",
  "ASYNC",
  "B",
  "C4",
  "C9",
  "D",
  "DTZ",
  "E",
  "ERA",
  "F",
  "FURB",
  "G",
  "I",
  "ICN",
  "LOG",
  "N",
  "NPY",
  "PD",
  "PT",
  "PTH",
  "R",
  "RUF",
  "S",
  "SIM",
  "T20",
  "TD",
  "W",
]
preview = true
mccabe.max-complexity = 10
pydocstyle.convention = "google"

[tool.ruff]
line-length = 79

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = """
--maxfail=1 \
--color=yes \
--cov=optimize_eig \
--html=docs/pytest_report.html \
--self-contained-html \
--cov-fail-under=100 \
--cov-report term-missing \
--cov-report html:docs/cov-report \
--doctest-modules \
--cov-config=pyproject.toml"""
testpaths = ["tests", "optimize_eig"]
python_files = ["*_test.py"]
python_functions = ["test_*"]
render_collapsed = true
bdd_features_base_dir = "bdd-features"

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
]

[tool.poe.tasks]
install = "poetry install --only main"
install-dev = "poetry install"
run = "python -m optimize_eig.optimize_eig"
test = "pytest"
install-pre-commit = "pre-commit install"
run-pre-commit = "pre-commit run --all-files"
pre-commit = ["install-pre-commit", "run-pre-commit"]
ruff-check = "ruff check **/*.py --fix"
ruff-format = "ruff format **/*.py"
lint = ["ruff-check", "ruff-format"]
doc = "mkdocs serve --use-directory-urls -f docs/mkdocs.yaml"
doc-html = "mkdocs build --no-directory-urls -f docs/mkdocs.yaml"
doc-publish = """mkdocs gh-deploy \
--config-file docs/mkdocs.yaml \
--no-directory-urls \
--remote-branch docs"""

[tool.poe.tasks.docker-build]
cmd = """
docker build 
--build-arg TESTBUILD=$no_test \
--build-arg BUILDTAG=$build_tag \
--build-arg BUILDPLATFORM=$build_platform \
--target $target \
-t optimize_eig:$target-$build_tag ."""
help = "Build a docker image to test the project in an isolated environment"
args = [
  { name = "no-test", default = true, type = "boolean" },
  { name = "build-tag", default = "3-alpine" },
  { name = "build-platform", default = "linux/amd64" },
  { name = "target", default = "prod" },
]
